/**
 * 正则表达式：
 * 1 简介：
 *    1 根据正则 可以检查一个字符串是否符合规则
 *    2 或者将字符串中符合规则的字符串提取出来
 *    3 
 * 2 
 * 
 * 
 * 
 */

//  创建正则表达式对象
//  语法：  
// var reg = new RegExp("正则表达式","匹配模式");

var reg = new RegExp("a");
var str1 = "a";

// 正则表达式的方法：
// test() 可以用来检测字符串是否符合 正则表达式  如果符合 返回 true  or false
var result = reg.test(str1);

// 在构造函数中可以传递匹配模式  作为 第二个参数
/**
 * 1 取值
 *  i 忽略大小写
 *  g 全局匹配模式
 *
 */

/**
 * 使用字面量创建正则表达式：
 *  1 语法：
 *        var 变量 = /正则表达式/匹配模式
 *  2 
 */

var phone = /^((\d{7,8})|((\+\d{2}-)?0\d{2,3}(-)?\d{7,8}))$/,


// 创建一个正则表达式 判断是否含有  a 或 b 
var zestr = /a|b/
// 创建一个正则表达式 判断是否含有字母
// [] 内的内容也是或的关系
var zestr2 = /[a-z]/
// [a-z]: 任意的小写字母
// [A-Z]: 任意的大写
// [A-z]: 任意字母 忽略大小写

// 检查一个字符串中是否含有 abc adc aec
// a[bde]c

// 检查一个
// [^ab]
// [^ xxx] 含有除了xxx 之外的数据 返回 true
// [0-9] 表示任意的数字



/**
 * 字符串和正则相关方法
 * 
 */

//  支持正则表达式的 String 对象的方法

search()
// 可以搜索字符串中是否含有指定的字符内容
// 如果搜索到指定内容 会返回第一次出现的内容
// 没有 则返回 -1
// 只会查找第一个 设置了全局模式也没用

match()
// 可以将一个字符串中 符合正则表达式内容的  提取出来
// 默认情况下 只会找到 第一个符合条件的 字符
// 
replace()
// 替换
// 将字符串中的指定的内容替换‘
// 需要俩个参数
    //  1 被替换的内容 可以接收一个字符串表达式作为参数
    //  2 新的内容
// 默认只会替换第一个

split()
// 将字符串拆分为 数组
// 根据任意字符拆
// 方法中可以传递一个 正则表达式作为 参数
// 方法会根据正则表达式进行拆分
// 可以设置 正则表达式 为全局校验 
// 这样就会匹配到所有的内容
// 可有为一个正则表达式设置多个匹配模式 顺序不影响
// match 会将匹配到的内容封装到一个数组中返回
// 即使指 查询到一个 也是一个数组
// 不设置全局模式 也全部分组


/**
 * 正则表达式语法：
 * 
 * 
 * 
 */

//  连续出现多个字符

// 量词 通过量词可以设置一个内容出现的次数
// 语法
  // /a{3}/  表示要找 a  并且找连续出现三次的
  // {n} 表示 正好出现 n 次
  // 量词只对前边的一个内容起作用
  // 使用 () 表示 内容是一个
  // ab{1,3}c 表示 b 可以 出现 1 到 3 次
  // {m,} 表示 出现 m 出以上
  // + 表示 至少一个
  // * 表示 0个或者多个都行
  // ？ 表示 0 个或者1个
  // 
  // 

  // 检查一个字符串是否以a开头
  //   /^a/ 表示 以a开头
  //  /a$/ 表示 以 a 结尾
  // /^a$/
  //  /^a | a $/


  /**
   * 
   * 
   * 
   *  
   */

  //  . 表示任意字符

  // 在正则表达式中使用 \ 表示转义字符

  // eg   \. 表示 .

  // 字符串里使用 转义字符 需要写俩个

  // 
  